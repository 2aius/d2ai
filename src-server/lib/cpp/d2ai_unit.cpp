/*
 * THIS FILE IS AUTO-GENERATED - DO NOT EDIT
 */

#include "d2ai_unit.h"

namespace d2ai {

const Unit Unit::NOT_DECODED{
    0,
    0,
    0,
    "",
    0,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    0,
    0,
    false,
    false,
    false,
    Vector3d::NOT_DECODED,
    0,
    Vector3d::NOT_DECODED,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    false,
    0.,
    false,
    0,
    0.,
    0.,
    0.,
    0.,
    0.,
    0,
    0,
    0.,
    0.,
    0,
    0,
    0.,
    0.,
    0.,
    0.,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0.,
    0,
    0,
    0,
    0,
    0,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    false,
    0.,
    0.,
    0.,
    std::vector<Ability>(),
    std::vector<Ability>(),
    std::vector<int>()
};

Unit::Unit(
        int handleId,
        int playerId,
        int teamId,
        const std::string& name,
        int currentActionType,
        bool controlled,
        bool hero,
        bool creep,
        bool ancientCreep,
        bool building,
        bool tower,
        bool fort,
        int courierState,
        int courierValue,
        bool courierFlying,
        bool illusion,
        bool seeable,
        const Vector3d& location,
        int facing,
        const Vector3d& velocity,
        int health,
        int maxHealth,
        int healthRegen,
        int mana,
        int maxMana,
        int manaRegen,
        int baseMovementSpeed,
        int currentMovementSpeed,
        bool alive,
        double respawnTime,
        bool buybackAvailable,
        int buybackCost,
        double buybackCooldown,
        double remainingLifespan,
        double baseDamage,
        double baseDamageVariance,
        double attackDamage,
        int attackRange,
        int attackSpeed,
        double secondsPerAttack,
        double lastAttackTime,
        int acquisitionRange,
        int attackProjectileSpeed,
        double spellAmp,
        double armor,
        double magicResist,
        double evasion,
        int bountyXp,
        int bountyGoldMin,
        int bountyGoldMax,
        int xpNeededToLevel,
        int abilityPoints,
        int level,
        int gold,
        int netWorth,
        int stashValue,
        int lastHits,
        int denies,
        double boundingRadius,
        int dayTimeVisionRange,
        int nightTimeVisionRange,
        int currentVisionRange,
        int healthRegenPerStr,
        int manaRegenPerInt,
        bool channeling,
        bool usingAbility,
        bool castingAbility,
        bool attackImmune,
        bool blind,
        bool blockDisabled,
        bool disarmed,
        bool dominated,
        bool evadeDisabled,
        bool hexed,
        bool invisible,
        bool invulnerable,
        bool magicImmune,
        bool muted,
        bool nightmared,
        bool rooted,
        bool silenced,
        bool speciallyDeniable,
        bool stunned,
        bool unableToMiss,
        bool scepterOwned,
        double timeSinceDamagedByAnyHero,
        double timeSinceDamagedByCreep,
        double timeSinceDamagedByTower,
        const std::vector<Ability>& abilities,
        const std::vector<Ability>& items,
        const std::vector<int>& nearbyTrees)
    : handleId(handleId),
      playerId(playerId),
      teamId(teamId),
      name(name),
      currentActionType(currentActionType),
      controlled(controlled),
      hero(hero),
      creep(creep),
      ancientCreep(ancientCreep),
      building(building),
      tower(tower),
      fort(fort),
      courierState(courierState),
      courierValue(courierValue),
      courierFlying(courierFlying),
      illusion(illusion),
      seeable(seeable),
      location(location),
      facing(facing),
      velocity(velocity),
      health(health),
      maxHealth(maxHealth),
      healthRegen(healthRegen),
      mana(mana),
      maxMana(maxMana),
      manaRegen(manaRegen),
      baseMovementSpeed(baseMovementSpeed),
      currentMovementSpeed(currentMovementSpeed),
      alive(alive),
      respawnTime(respawnTime),
      buybackAvailable(buybackAvailable),
      buybackCost(buybackCost),
      buybackCooldown(buybackCooldown),
      remainingLifespan(remainingLifespan),
      baseDamage(baseDamage),
      baseDamageVariance(baseDamageVariance),
      attackDamage(attackDamage),
      attackRange(attackRange),
      attackSpeed(attackSpeed),
      secondsPerAttack(secondsPerAttack),
      lastAttackTime(lastAttackTime),
      acquisitionRange(acquisitionRange),
      attackProjectileSpeed(attackProjectileSpeed),
      spellAmp(spellAmp),
      armor(armor),
      magicResist(magicResist),
      evasion(evasion),
      bountyXp(bountyXp),
      bountyGoldMin(bountyGoldMin),
      bountyGoldMax(bountyGoldMax),
      xpNeededToLevel(xpNeededToLevel),
      abilityPoints(abilityPoints),
      level(level),
      gold(gold),
      netWorth(netWorth),
      stashValue(stashValue),
      lastHits(lastHits),
      denies(denies),
      boundingRadius(boundingRadius),
      dayTimeVisionRange(dayTimeVisionRange),
      nightTimeVisionRange(nightTimeVisionRange),
      currentVisionRange(currentVisionRange),
      healthRegenPerStr(healthRegenPerStr),
      manaRegenPerInt(manaRegenPerInt),
      channeling(channeling),
      usingAbility(usingAbility),
      castingAbility(castingAbility),
      attackImmune(attackImmune),
      blind(blind),
      blockDisabled(blockDisabled),
      disarmed(disarmed),
      dominated(dominated),
      evadeDisabled(evadeDisabled),
      hexed(hexed),
      invisible(invisible),
      invulnerable(invulnerable),
      magicImmune(magicImmune),
      muted(muted),
      nightmared(nightmared),
      rooted(rooted),
      silenced(silenced),
      speciallyDeniable(speciallyDeniable),
      stunned(stunned),
      unableToMiss(unableToMiss),
      scepterOwned(scepterOwned),
      timeSinceDamagedByAnyHero(timeSinceDamagedByAnyHero),
      timeSinceDamagedByCreep(timeSinceDamagedByCreep),
      timeSinceDamagedByTower(timeSinceDamagedByTower),
      abilities(abilities),
      items(items),
      nearbyTrees(nearbyTrees) {
}

} /* namespace d2ai */
